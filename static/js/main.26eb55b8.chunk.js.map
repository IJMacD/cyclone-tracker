{"version":3,"sources":["use-dimensions.js","Map.jsx","App.js","serviceWorker.js","index.js"],"names":["useDimensions","useState","dimensions","setDimensions","ref","useRef","useLayoutEffect","current","measure","window","requestAnimationFrame","node","rect","getBoundingClientRect","width","height","top","x","left","y","right","bottom","getDimensionObject","addEventListener","removeEventListener","LAT","LON","SCALE","INITIAL_WIDTH","INITIAL_HEIGHT","Map","myLocation","cyclones","bgRef","React","dLon","dLat","bounds","minLat","minLon","maxLat","maxLon","coastline","setCoastline","useEffect","ctx","getContext","clearRect","getPosition","beginPath","ellipse","Math","PI","fillStyle","fill","cyclone","track","find","p","type","r","windspeed","globalAlpha","strokeLine","filter","point","strokeStyle","d","time","substring","strokeText","fillText","s","a","fetchCoastline","features","feature","geometry","coordinates","map","latitude","longitude","coords","style","position","zIndex","points","colour","lineWidth","first","moveTo","lineTo","stroke","split","App","props","state","navigator","geolocation","getCurrentPosition","setState","this","timeout","setInterval","fetchData","bind","clearInterval","fetch","json","className","c","key","id","name","distance","bearing","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26eb55b8.chunk.js","sourcesContent":["import { useState, useRef, useLayoutEffect } from \"react\";\r\n\r\n/** \r\n * @typedef DimensionObject\r\n * @prop {number} [width]\r\n * @prop {number} [height]\r\n * @prop {number} [top]\r\n * @prop {number} [left]\r\n * @prop {number} [right]\r\n * @prop {number} [bottom]\r\n * @prop {number} [x]\r\n * @prop {number} [y]\r\n */\r\n\r\nfunction getDimensionObject (node) {\r\n    const rect = node.getBoundingClientRect();\r\n\r\n    return {\r\n        width: rect.width,\r\n        height: rect.height,\r\n        top: \"x\" in rect ? rect.x : rect.top,\r\n        left: \"y\" in rect ? rect.y : rect.left,\r\n        x: \"x\" in rect ? rect.x : rect.left,\r\n        y: \"y\" in rect ? rect.y : rect.top,\r\n        right: rect.right,\r\n        bottom: rect.bottom\r\n    };\r\n}\r\n\r\n/**\r\n *  @return {[React.MutableRefObject, DimensionObject]}\r\n */\r\nfunction useDimensions() {\r\n    const [dimensions, setDimensions] = useState({});\r\n    const ref = useRef();\r\n\r\n    useLayoutEffect(() => {\r\n        if (ref.current) {\r\n            const measure = () =>\r\n                window.requestAnimationFrame(() =>\r\n                    setDimensions(getDimensionObject(ref.current))\r\n                );\r\n            measure();\r\n\r\n            window.addEventListener(\"resize\", measure);\r\n\r\n            return () => {\r\n                window.removeEventListener(\"resize\", measure);\r\n            };\r\n        }\r\n    }, [ref.current]);\r\n\r\n    return [ref, dimensions];\r\n}\r\n\r\nexport default useDimensions;","import React from 'react';\nimport useDimensions from './use-dimensions';\n\n// COORDS of HKO\nconst LAT = 22.3025;\nconst LON = 114.174167;\nconst SCALE = 0.033;\nconst INITIAL_WIDTH = 1000;\nconst INITIAL_HEIGHT = 1000;\n\n/**\n * @typedef Cyclone\n * @prop {number} id \n * @prop {string} name \n * @prop {string} nameZH\n * @prop {string} bearing\n * @prop {number} distance\n * @prop {Point[]} track\n */\n\n/**\n * @typedef Point\n * @prop {\"P\"|\"A\"|\"F\"} type \n * @prop {string} time \n * @prop {number} latitude \n * @prop {number} longitude \n * @prop {string} [classification]\n * @prop {number} [windspeed]\n */\n\n/**\n * @param {{ myLocation, cyclones: Cyclone[] }} param0\n */\nexport default function Map ({ myLocation, cyclones }) {\n    /** @type {React.MutableRefObject<HTMLCanvasElement} */\n    const bgRef = React.useRef();\n\n    const [ ref, { width = INITIAL_WIDTH, height = INITIAL_HEIGHT} ] = useDimensions();\n\n    const dLon = SCALE * width / 2;\n    const dLat = SCALE * height / 2;\n\n    const bounds = {\n        minLat: LAT - dLat,\n        minLon: LON - dLon,\n        maxLat: LAT + dLat,\n        maxLon: LON + dLon,\n        width,\n        height,\n    };\n\n    const [ coastline, setCoastline ] = React.useState();\n\n    // Cyclone Track\n    React.useEffect(() => {\n        if (ref.current) {\n            const ctx = ref.current.getContext(\"2d\");\n\n            ctx.clearRect(0, 0, bounds.width, bounds.height);\n\n            if (myLocation) {\n                const { x, y } = getPosition(myLocation, bounds);\n                ctx.beginPath();\n                ctx.ellipse(x, y, 2, 2, 0, 0, Math.PI * 2);\n                ctx.fillStyle = \"#FF0000\";\n                ctx.fill();\n            }\n\n            for (const cyclone of cyclones) {\n                const current = cyclone.track.find(p => p.type === \"A\");\n\n                if (current) {\n                    const { x, y } = getPosition(current, bounds);\n                    ctx.beginPath();\n                    const r = current.windspeed * 2.0;\n                    ctx.ellipse(x, y, r, r, 0, 0, Math.PI * 2);\n                    ctx.fillStyle = \"#C0C0C0\";\n                    ctx.globalAlpha = 0.5;\n                    ctx.fill();\n                    ctx.globalAlpha = 1;\n                }\n\n                strokeLine(ctx, bounds, cyclone.track.filter(p => p.type === \"P\" || p.type === \"A\"), \"#000000\", 4);\n                strokeLine(ctx, bounds, cyclone.track.filter(p => p.type === \"F\" || p.type === \"A\"), \"#808080\", 4);\n\n                const currentColour = \"#800080\";\n\n                for (const point of cyclone.track) {\n                    if (point.windspeed) {\n                        ctx.beginPath();\n                        const { x, y } = getPosition(point, bounds);\n                        const r = point.windspeed * 0.1;\n                        ctx.ellipse(x, y, r, r, 0, 0, Math.PI * 2);\n                        ctx.fillStyle = point.type === \"P\" ? \"#000000\" : point.type === \"F\" ? \"#808080\" : currentColour;\n                        ctx.fill();\n                    }\n                }\n\n                if (current) {\n                    const { x, y } = getPosition(current, bounds);\n                    ctx.strokeStyle = \"#FFFFFF\";\n                    ctx.fillStyle = currentColour;\n\n                    const d = current.time.substring(0, 13);\n                    ctx.strokeText(d, x, y + 30);\n                    ctx.fillText(d, x, y + 30);\n                    const s = `${current.windspeed} km/h`;\n                    ctx.strokeText(s, x, y + 42);\n                    ctx.fillText(s, x, y + 42);\n                }\n            }\n        }\n    }, [myLocation, cyclones, bounds.width, bounds.height]);\n\n    // Load coastline\n    React.useEffect(() => {\n        async function fetchCoastline () {\n            const coastline = await import(\"./coastline.json\");\n            setCoastline(coastline);\n        }\n        fetchCoastline();\n    }, []);\n\n    // Draw Coastline\n    React.useEffect(() => {\n        if (bgRef.current && coastline) {\n            const ctx = bgRef.current.getContext(\"2d\");\n\n            ctx.clearRect(0, 0, INITIAL_WIDTH, INITIAL_HEIGHT);\n\n            for (const feature of coastline.features) {\n                if (feature.geometry.type === \"LineString\") {\n                    strokeLine(ctx, bounds, feature.geometry.coordinates.map(p => ({ latitude: p[1], longitude: p[0] })), \"#80C080\", 1);\n                }\n                else if (feature.geometry.type === \"MultiLineString\"){\n                    for (const coords of feature.geometry.coordinates) {\n                        strokeLine(ctx, bounds, coords.map(p => ({ latitude: p[1], longitude: p[0] })), \"#80C080\", 1);\n                    }\n                }\n            }\n        }\n    }, [coastline, bounds.width, bounds.height]);\n\n    return <div style={{ position: \"relative\" }}>\n        <canvas ref={bgRef} width={bounds.width} height={bounds.height} style={{ width: \"100vw\", height: \"100vh\", position: \"absolute\", zIndex: -1 }} />\n        <canvas ref={ref} width={bounds.width} height={bounds.height} style={{ width: \"100vw\", height: \"100vh\" }} />\n    </div>;\n}\n\n/**\n * @param {{ latitude: number, longitude: number }} point\n */\nfunction getPosition (point, bounds) {\n    const x = (point.longitude - bounds.minLon) / (bounds.maxLon - bounds.minLon) * bounds.width;\n    const y = bounds.height - (point.latitude - bounds.minLat) / (bounds.maxLat - bounds.minLat) * bounds.height;\n\n    return { x, y };\n}\n\nfunction strokeLine(ctx, bounds, points, colour=\"#000000\", lineWidth=1) {\n    ctx.strokeStyle = colour;\n    ctx.lineWidth = lineWidth;\n    ctx.beginPath();\n                \n    let first = true;\n    for (const point of points) {\n        const { x, y } = getPosition(point, bounds);\n        first ? ctx.moveTo(x, y) : ctx.lineTo(x, y);\n        first = false;\n    }\n    ctx.stroke();\n}\n\nconst DIRECTIONS = \"N NNE NE ENE E ESE SE SSE S SSW SW WSW W WNW NW NNW\".split(\" \");\nfunction compassToRadians (direction) {\n    return DIRECTIONS.indexOf(direction) * Math.PI * 2 / DIRECTIONS.length;\n}","import React from 'react';\nimport Map from './Map';\nimport './App.css';\n\nconst FIFTEEN_MINUTES = 15 * 60 * 1000;\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      cyclones: [],\n      myLocation: null,\n    };\n  }\n\n  componentDidMount () {\n    navigator.geolocation.getCurrentPosition(({ coords: myLocation }) => {\n      this.setState({ myLocation });\n    });\n\n    this.timeout = setInterval(this.fetchData.bind(this), FIFTEEN_MINUTES);\n    this.fetchData();\n  }\n\n  componentWillUnmount () {\n    clearInterval(this.timeout);\n    this.timeout = null;\n  }\n\n  async fetchData () {\n    const r = await fetch(\"https://www.i-learner.edu.hk/weather/api/v2/cyclone\");\n    const cyclones = await r.json();\n\n    // Avoid updating state after unmount\n    if (this.timeout) {\n      this.setState({ cyclones });\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <ul style={{ position: \"fixed\" }}>\n          {this.state.cyclones.map(c => <li key={c.id}>{c.name} {c.distance}km {c.bearing}</li>)}\n        </ul>\n        <Map cyclones={this.state.cyclones} myLocation={this.state.myLocation} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}